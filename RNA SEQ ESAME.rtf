{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh17440\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1 cd /workspaces/class-rnaseq\
mkdir -p analysis\
cd analysis\
\
## instead of copying - we create symbolic links to the original reads\
mkdir reads\
cd reads\
ln -s /workspaces/class-rnaseq/datasets-class-rnaseq/raw_data/* .\
\
### check if you can execute salmon by typing "salmon" on the terminal\
## sometimes it fails on RStudio terminal, on CodeSpaces while it works on GitPod\
## export PATH=$\{PATH\}:/usr/local/bin\
\
## the index for the transcriptome is located in\
## /workspaces/class-rnaseq/datasets_reference_only/trascriptome/chr21_transcripts_index\
\
## now we can quantify all samples, by running a loop with salmon and the following\
\
####DEVO ESSERE IN DATIESAME \
############primo comando che invio\
\
cd datiesame/\
\
ls -l\
\
mkdir -p analysis\
cd analysis\
mkdir-p reads\
cd reads\
\
tar -xvzf /home/gitpod/datiesame/data_rnaseq.tar.gz -C .\
\
\
### check if you can execute salmon by typing "salmon" on the terminal\
## sometimes it fails on RStudio terminal, on CodeSpaces while it works on GitPod\
## export PATH=$\{PATH\}:/usr/local/bin\
\
###con salmon vado a quantificare, cio\'e8 stimare l\'92abbondanza dei trascritti\
###dopo aver fatto correre questo comando in reads ho una serie di cartelle, una per ogni campione, che sono i file di quantificazione dei trascritti per ciascun campione\
\
for sample in `ls *_1.fasta.gz`\
do\
index=\'93/home/gitpod/datiesame/datasets_reference_only/trascriptome/chr21_transcripts_index"\
name=$\{sample%_1.fasta.gz\}\
echo "quantifying $name"\
salmon quant \\\
 -p 2 \\\
 -i $index \\\
 -l IU \\\
 -1 "$\{name\}_1.fasta.gz" -2 "$\{name\}_2.fasta.gz" \\\
 --validateMappings \\\
 -o "$\{name\}.quant"\
echo -e "$name done now\\n"\
done\
\
### let's inspect a quantification file\
\
cd sample_01.quant\
head quant.sf\
\
## more information on the format of the output\
## https://salmon.readthedocs.io/en/latest/file_formats.html\
\
\
\
library(DESeq2)\
library(tximport)\
library(tidyverse)\
library(pheatmap)\
library(clusterProfiler)\
library(DOSE)\
library(org.Hs.eg.db)\
\
###################################\
## PREPARE DATASET CONDITIONS #####\
###################################\
\
getwd()\
\
setwd(\'93/home/gitpod/datieame/analysis")\
\
####creazione di una tibble che rappresenti il mio design sperimentale\
\
dataset <- tibble(\
  sample = c("sample_01",\
             "sample_02",\
             "sample_03",\
             "sample_04",\
             "sample_05",\
             "sample_06"),\
  condition = c(rep("control", 3),\
                rep("case", 3))\
)\
\
\
###con salmon quantifichiamo i trascritti, adesso vogliamo calcolare i livelli di espressione a livello genico, quindi abbiamo bisogno di una tabella di corrispondenza\
###tabella di corrispondenza gene-trascritto\
\
tx2gene <- read_tsv(\'93/home/gitpod/datiesame/datasets_reference_only/trascriptome/gencode.v29.transcripts_no-vers_chr21_tx2gene.txt")\
\
\
###################################\
#### READ LOCAL FILES IN ##########\
###################################\
\
###adesso dobbiamo importare i dati quantificati da salmon e sommare le conte per ottenere la quantificazione a livello di gene\
##si combinano le conte (cio\'e8 i livelli di espressione) di tutti  i trascritti che appartengono a quel gene \'97> conte totali per ogni gene\
######a ciascun elemento del vettore assegno un nome corrispondente al campione, in modo tale che quando leggo i file venga stabilita una corrispondenza chiara tra il file che sto leggendo e il campione indicato nella tibble\
\
\
### files <- creazione di un vettore con i percorsi dei file da leggere\
###Assegnazione dei nomi ai file\
files <- file.path(\'93/home/gitpod/datiesame/analysis/reads/", paste0(dataset$sample,".quant"), "quant.sf")\
names(files) <- dataset$sample\
\
\
##########FUNZIONE: TXIIMPORT, lettura dei file di quantificazione e aggregazione delle conte per gene \'97> il software aggrega le conte a livello di gene partendo dai dati del trascritto\
###ogni riga ho un gene, ogni colonna un campione (conte per ciascun campione)\
txi <- tximport(files, type = "salmon", tx2gene = tx2gene)\
\
colnames(txi$counts)\
rownames(dataset) <- colnames(txi$counts)\
\
\
########funzione per creare un datasetDeSeq che combina le conte per gene (cio\'e8 i dati ricalcolati ed aggregati per gene) e il design dell\'92esperimento (a quale gruppo appartiene ciascun campione)\
####IMPORTANTE: condition definisce il modello sperimentale che stiamo usando\'97> a sinistra variabile dipendente, a destra la variabile indipendente che DISTINGUE I DUE GRUPPI SPERIMENTALI\
###QUESTA FORMULA DICE CHE SUPPONIAMO CHE L\'92ESPRESSIONE DIFFERENZIALE (DE) DIPENDA DAL FATTORE CONDITION\
\
dds <- DESeqDataSetFromTximport(txi, dataset, ~condition)\
\
###################################\
## PREFILTER MIN COUNTS >10 #####\
###################################\
\
\
##per ogni gene (riga della matrice delle conte) sommiamo i valori di tutte le colonne (somma di tutte delle conte di tutti i campioni)\
###keep contiene un vettore logico true o false che indica quali geni soddisfano il criterio\
###filtro l\'92oggetto ddi, mantenendo solo i geni che soddisfano il criterio\
keep <- rowSums(counts(dds)) >= 10\
dds <- dds[keep,]\
\
### make sure base level is control\
#######IMPORTNATE: DEVO CHIARIRE IL CONFRONTO TRA I GRUPPI \'97> SPECIFICARE CHIARAMENTE QUAL\'92\'e8 IL GRUPPO DI RIFERIMENTO\
dds$condition <- relevel(dds$condition, ref = "control")\
\
\
###################################\
##### DIFFERENTIAL EXPRESSION #####\
###################################\
###########ANALISI DELL\'92ESPRESSIONE DIFFERENZIALE\
\
dds <- DESeq(dds)\
\
\
###################################\
## EXTRACT ANALYSIS RESULTS #####\
###################################\
\
####I RISULTATI LI VOGLIO VEDERE IN FORMA DI TABELLA\
###CON L\'92ESPRESSIONE RESULTS STIAMO ESTRAENDO I RISULTATI DELL\'92ESPRESSIONE DIFFERENZIALE E LI STIAMO METTENDO IN UN OGETTO CHIAMATO RES, CHE ORDINIAMO CON P-VALUE\
############### head (resOrder)\
res <- results(dds)\
resOrdered <- res[order(res$pvalue),]\
\
## writeLines(summary(res), "differential_expression_summary.txt")\
\
plotMA(res, ylim=c(-3,3))\
\
### fit delle nostre dispersioni (rosso) e lo shrinkag\
plotDispEsts(dds)\
\
\
#####utilizzando il plot delle count, possiamo fare il boxplot per ciascun gene.\
###qui sto scegliendo quello con la p-value pi\'f9 piccola (gene molto significativo)\
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")\
\
###################################\
## WRITE RESULTS OF ANALYSIS #####\
###################################\
\
resdata <- as_tibble(resOrdered)\
resdata$gene <- rownames(resOrdered)\
write_tsv(resdata, "analysis_results.tsv")\
\
save.image("deseq2_analysis.RData")\
\
\
\
\
############################################\
## CLUSTERING ##############################\
############################################\
\
ntd <- normTransform(dds)\
select <- order(rowMeans(counts(dds,normalized=TRUE)),\
                decreasing=TRUE)[1:20]\
df <- as.data.frame(colData(dds)[,c("condition")])\
\
pheatmap(assay(ntd)[select,],\
         cluster_cols=FALSE, annotation_col=df$condition)\
\
plotPCA(ntd, intgroup=c("condition"))\
\
save.image("deseq2_analysis.RData")\
\
\
\
\
###################################\
## EXTRACT SIGNIFICANT GENES #####\
###################################\
\
universe <- AnnotationDbi::select(org.Hs.eg.db,\
                                  keys = keys(org.Hs.eg.db),\
                                  columns = c('ENTREZID','SYMBOL','ENSEMBL','ENSEMBLTRANS'),\
                                  keytype = 'ENTREZID')\
\
sig_genes <- resdata$gene[which(resdata$padj<0.05)]\
entrez_genes_sig <- unique(universe[which(universe$ENSEMBL %in% sig_genes),]$ENTREZID)\
\
pvalue_ens_genes <- resdata$padj[which(resdata$padj<0.05)]\
names(pvalue_ens_genes)<-sig_genes\
\
pvalue_entrez_genes <- resdata$padj[which(resdata$padj<0.05)]\
names(pvalue_entrez_genes) <- entrez_genes_sig\
\
\
###################################\
## ENRICH GO ANALYSIS #####\
###################################\
\
ego <- enrichGO( gene = sig_genes,\
                 universe = unique(tx2gene$GENEID),\
                 OrgDb = org.Hs.eg.db,\
                 keyType = 'ENSEMBL',\
                 ont = "BP",\
                 pAdjustMethod = "BH",\
                 pvalueCutoff  = 0.05)\
\
## writeLines(summary(ego), "enrich_GO_results.txt")\
\
pdf("plots_ego.pdf")\
dotplot(ego, showCategory=30)\
dev.off()\
\
pdf("plots_network-ego.pdf")\
cnetplot(ego, foldChange=resdata$log2FoldChange[which(resdata$padj<0.5)])\
dev.off()\
\
###################################\
## DISGNET ANALYSIS #####\
###################################\
\
## we need to unpack the file we have to read first\
## use the terminal\
## cd /home/rstudio/data/datasets_class/reference/trascriptome/\
## gunzip all_gene_disease_associations.tsv.gz\
\
gda <- read_tsv(gzfile(\'93/home/gitpod/datiesame/datasets_reference_only/trascriptome/all_gene_disease_associations.tsv.gz"))\
\
disease2gene=gda[, c("diseaseId", "geneId")]\
disease2name=gda[, c("diseaseId", "diseaseName")]\
\
disgnet = enricher(entrez_genes_sig, TERM2GENE=disease2gene, TERM2NAME=disease2name)\
\
## writeLines(summary(disgnet), "summary_disgnet.txt")\
\
cnetplot(disgnet, foldChange=resdata$log2FoldChange[which(resdata$padj<0.5)])\
\
\
save.image("deseq2_analysis.RData")\
\
\
\
\
\
\
}