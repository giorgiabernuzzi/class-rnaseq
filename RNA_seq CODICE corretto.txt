sul terminale di R

#entrare nel percorso dove sono presenti le cartelle es. 

pwd /home/gitpod
cd datiesame/
ls -l

#pwd /home/gitpod/datiesame

mkdir -p analysis
cd analysis

mkdir -p reads
cd reads

tar -xzvf /home/gitpod/datiesame/data_rnaseq.tar.gz -C .

####### scrivere Salmon prima del ciclo
####### sometimes it fails on RStudio terminal, on CodeSpaces while it works on GitPod
## export PATH=${PATH}:/usr/local/bin

## now we can quantify all samples, by running a loop with salmon and the following
#ritornare in reads
###cd ..
###cd analisi/reads/
###con salmon vado a quantificare, cioè stimare l’abbondanza dei trascritti
###dopo aver fatto correre questo comando in reads ho una serie di cartelle, una per ogni campione, che sono i file di quantificazione dei trascritti per ciascun campione

for sample in `ls *_1.fasta.gz`
do
index="/home/gitpod/datiesame/datasets_reference_only/trascriptome/chr21_transcripts_index"
name=${sample%_1.fasta.gz}
echo "quantifying $name"
salmon quant \
 -p 2 \
 -i $index \
 -l IU \
 -1 "${name}_1.fasta.gz" -2 "${name}_2.fasta.gz" \
 --validateMappings \
 -o "${name}.quant"
echo -e "$name done now\n"
done

### let's inspect a quantification file

cd sample_01.quant
head quant.sf

## more information on the format of the output
## https://salmon.readthedocs.io/en/latest/file_formats.html

#####################CONSOLE
#Aggiungi librerie dell'esercizio

library(DESeq2)
library(tximport)
library(tidyverse)
library(pheatmap)
library(clusterProfiler)
library(DOSE)
library(org.Hs.eg.db)

###################################
## PREPARE DATASET CONDITIONS #####
###################################

getwd()
setwd("/home/gitpod/datiesame/analysis")

####creazione di una tibble che mi rappresenti il mio design sperimentale

dataset <- tibble(
  sample = c("sample_01",
             "sample_02",
             "sample_03",
             "sample_04",
             "sample_05",
             "sample_06"),
  condition = c(rep("control", 3),
                rep("case", 3))
)

####con salmon quantifichiamo i trascritti, adesso vogliamo calcolare i livelli di espressione a livello genico, quindi abbiamo bisogno di una tabella di corrispondenza
###tabella di corrispondenza gene-trascritto

tx2gene <- read_tsv("/home/gitpod/datiesame/datasets_reference_only/trascriptome/gencode.v29.transcripts_no-vers_chr21_tx2gene.txt")


###################################
#### READ LOCAL FILES IN ##########
###################################
###adesso dobbiamo importare i dati quantificati da salmon e sommare le conte per ottenere la quantificazione a livello di gene -> si combinano le conte (cioè i livelli di espressione) di tutti  i trascritti che appartengono a quel gene —> conte totali per ogni gene


files <- file.path("/home/gitpod/datiesame/analysis/reads/", paste0(dataset$sample,".quant"), "quant.sf")
names(files) <- dataset$sample

##########FUNZIONE: TXIIMPORT, lettura dei file di quantificazione e aggregazione delle conte per gene —> il software aggrega le conte a livello di gene partendo dai dati del trascritto
###ogni riga ho un gene, ogni colonna un campione (conte per ciascun campione)

txi <- tximport(files, type = "salmon", tx2gene = tx2gene)

colnames(txi$counts)
rownames(dataset) <- colnames(txi$counts)

########funzione per creare un datasetDeSeq che combina le conte per gene (cioè i dati ricalcolati ed aggregati per gene) e il design dell’esperimento (a quale gruppo appartiene ciascun campione)
####IMPORTANTE: condition definisce il modello sperimentale che stiamo usando—> a sinistra variabile dipendente, a destra la variabile indipendente che DISTINGUE I DUE GRUPPI SPERIMENTALI
###QUESTA FORMULA DICE CHE SUPPONIAMO CHE L’ESPRESSIONE DIFFERENZIALE (DE) DIPENDA DAL FATTORE CONDITION


dds <- DESeqDataSetFromTximport(txi, dataset, ~condition)

###################################
## PREFILTER MIN COUNTS >10 #####
###################################
###per ogni gene (riga della matrice delle conte) sommiamo i valori di tutte le colonne (somma di tutte delle conte di tutti i campioni)
###keep contiene un vettore logico true o false che indica quali geni soddisfano il criterio
###filtro l’oggetto ddi, mantenendo solo i geni che soddisfano il criterio

keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]

#######IMPORTNATE: DEVO CHIARIRE IL CONFRONTO TRA I GRUPPI —> SPECIFICARE CHIARAMENTE QUAL’è IL GRUPPO DI RIFERIMENTO
### make sure base level is control
dds$condition <- relevel(dds$condition, ref = "control")


###################################
##### DIFFERENTIAL EXPRESSION #####
###################################
###########ANALISI DELL’ESPRESSIONE DIFFERENZIALE

dds <- DESeq(dds)


###################################
## EXTRACT ANALYSIS RESULTS #####
###################################
####I RISULTATI LI VOGLIO VEDERE IN FORMA DI TABELLA
###CON L’ESPRESSIONE RESULTS STIAMO ESTRAENDO I RISULTATI DELL’ESPRESSIONE DIFFERENZIALE E LI STIAMO METTENDO IN UN OGETTO CHIAMATO RES, CHE ORDINIAMO CON P-VALUE
###resOredered sono i risultati ordinati in p-valu

res <- results(dds)
resOrdered <- res[order(res$pvalue),]

head(resOrdered)

## writeLines(summary(res), "differential_expression_summary.txt")


plotMA(res, ylim=c(-3,3))

### fit delle nostre dispersioni (rosso) e lo shrinkag
plotDispEsts(dds)

#####utilizzando il plot delle count, possiamo fare il boxplot per ciascun gene.
###qui sto scegliendo quello con la p-value più piccola (gene molto significativo)

plotCounts(dds, gene=which.min(res$padj), intgroup="condition")


###################################
## WRITE RESULTS OF ANALYSIS #####
###################################
####converte l'oggetto di resOrdered in una tibble ed aggiunge una colonna coi nomi dei geni

resdata <- as_tibble(resOrdered)
resdata$gene <- rownames(resOrdered)
write_tsv(resdata, "analysis_results.tsv")

save.image("deseq2_analysis.RData")


###questa funzione applica una trasformazione di normalizzazione ai dati del dds (deseq-dataset)
####I DATI DI ESPRESSIONE VENGONO NORMALIZZATI PER CORREGGERE LE DIFFERENZE TRA CAMPIONI
###SELEZIONE DEI 20 GENI CON MEDIA DELLE CONTE PIU ALTA --> GENI PIU ESPRESSI
###################ORDINA I GENI IN BASE ALLA LORO MEDIA DELLE CONTE, DAL PIU ALTO AL PIU BASSO
######SELEZIONA I GENI CON LA MEDIA DELLE CONTE PIU ALTA 


ntd <- normTransform(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
                decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition")])

pheatmap(assay(ntd)[select,],
         cluster_cols=FALSE, annotation_col=df$condition)


###ESEGUE UNA PRINCIPAL COMPONENT ANALYSIS SUI DATI TRASFORMATI (LOG2FC DELLE CONTE NORMALIZZATE)
###LA PCA AIUTA A VISULIZZARE LA SEOARAZIONE TRA I GRUPPI, RIDUCENDO LA DIMENSIONALIA E MOSTRANDO LE COMPONENTI PRINCIPALI CHE SPIEGANO LA MAGGIOR PARTE DELLA VARIANZA

plotPCA(ntd, intgroup=c("condition"))


save.image("deseq2_analysis.RData")


#######ESTRAZIONE DELL'UNIVERSO DA DATABASE
###Sono presenti tutti i geni del genoma umano e stiamo estraendo - ID ENTREZID -SYMBOLO - ID ENSEMBLE - ID TRASCRITTO

universe <- AnnotationDbi::select(org.Hs.eg.db,
                                  keys = keys(org.Hs.eg.db),
                                  columns = c('ENTREZID','SYMBOL','ENSEMBL','ENSEMBLTRANS'),
                                  keytype = 'ENTREZID')

head(universe)

###a questo punto facciamo un TEST DI OVER RAPPRESENTAZIONE: serve universo, lista di geni differential expressed e la funzione (che è il pacchetto cluster profile) che prende tutte le liste categoria-specifiche di gene onthology e le testa una ad una 
#####IN PARTICOLARE FA IL TEST DI FISHER

sig_genes <- resdata$gene[which(resdata$padj<0.05)]


#####IL COMANDO CHE SEGUE SERVE SOLO PER CONVERTIRE IL NOME DEI GENI 
entrez_genes_sig <- unique(universe[which(universe$ENSEMBL %in% sig_genes),]$ENTREZID)
pvalue_ens_genes <- resdata$padj[which(resdata$padj<0.05)]
names(pvalue_ens_genes)<-sig_genes

pvalue_ens_genes

pvalue_entrez_genes <- resdata$padj[which(resdata$padj<0.05)]
names(pvalue_entrez_genes) <- entrez_genes_sig

pvalue_entrez_genes

###################################
## ENRICH GO ANALYSIS #####
###################################
####la funzione enrichGO va a testare la lista di geni con un test ipergeometrico contro tutte le funzioni una ad una 
####con ONT scelgo la categoria di gene ONTOLOGY
####si ha la conta dei geni che sono membri di quella funzione, poi ho il rapporto, ovvero quanti geni della mia lista sono membri di quella funzione
####se questa analisi non fosse stata significativa avremmo 0 geni

ego <- enrichGO( gene = sig_genes,
                 universe = unique(tx2gene$GENEID),
                 OrgDb = org.Hs.eg.db,
                 keyType = 'ENSEMBL',
                 ont = "BP",
                 pAdjustMethod = "BH",
                 pvalueCutoff  = 0.05)
ego

## writeLines(summary(ego), "enrich_GO_results.txt")

pdf("plots_ego.pdf") #salvare i pdf è facoltativo, per rimuoverlo basta togliere pdf e dev.off
dotplot(ego, showCategory=10)
dev.off()

###alcuni geni della mia analisi di enrichment saranno annotati per piu funzioni
#####LE CONTE SI RIFERISCONO AI NOMI DEI PROCESSI
####OSSERVARE QUALI PROCESSI HANNO PIU GENI CHE PARTECIPANO TRA QUELLI SIGNIFICATIVI 

pdf("plots_network-ego.pdf")
cnetplot(ego, foldChange=resdata$log2FoldChange[which(resdata$padj<0.5)])
dev.off()

###################################
## DISGNET ANALYSIS #####
###################################

## we need to unpack the file we have to read first
## use the terminal
## cd /home/rstudio/data/datasets_class/reference/trascriptome/
## gunzip all_gene_disease_associations.tsv.gz


######GDA - DATABASE GENE-DISEASE ASSOSATION: RACCOLTA DEI RISULTATI IN LETTERATURA DAL PUNTO DI VISTA ASSOCIAZIONE-GENE MALATTIA
###In questo modo io posso avere un idea se e quanti geni tra quelli significativi sono gia stati riportati come associati ad alcune malattie

gda <- read_tsv(gzfile("/workspace/class-rnaseq/datasets_reference_only/trascriptome/all_gene_disease_associations.tsv.gz"))

####ho bisogno di due oggetti: uno associa il gene all'ID della malattia, il secondo il nome della malattia all'ID della malattia

disease2gene=gda[, c("diseaseId", "geneId")]
disease2name=gda[, c("diseaseId", "diseaseName")]

disgnet = enricher(entrez_genes_sig, TERM2GENE=disease2gene, TERM2NAME=disease2name)

## writeLines(summary(disgnet), "summary_disgnet.txt")
#####ad. es il grafico mostra che per la malattia...ci son due geni connessi

cnetplot(disgnet, foldChange=resdata$log2FoldChange[which(resdata$padj<0.5)])


save.image("deseq2_analysis.RData")
